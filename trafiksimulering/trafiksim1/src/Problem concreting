1.0 Make the Lane class print out on which positions in the lane there are cars
1.0.1 To do that we need to fill it with NEW CARS
1.0.1.1 To fill it with cars some TIME have to pass
1.0.1.2 We need a working Car class to create cars
1.0.2 We need a way to display the lane's contents
1.0.2.1 This we do with a toString method in the Lane class which puts a [X] on a position with a car and a [ ] for an empty car position in the lane
X1.1 Put a car on the first position in the lane
X1.2 Step the lane forward and put a new car on the second position
X1.3 Recursive: step the lane forward a number of times equal to the number of car positions in the lane
X1.4 Begin the move forward action from the side of the lane(s) closest to the lights and until the end of the lane like above
X1.5 Let r2 be the lane reaching the right light on the right side in the travel direction and let lane r1 be parallel with it on its left side reaching the left light
X1.6 Let r0 be the single lane reaching the two parallel lanes r1 and r2
X1.7 Thus when a car reaches the last position in r0 it can either go to r1 or r2 depending on the Car's DESTINATION.
1.8 If a car wants to go onto r1 but it is already occupied by a car, it will go onto r2 if possible, and vice versa
1.9 If both first positions in r1 and r2 are occupied then the car can't move forward.
1.11 If the car that is currently being targeted for the forward stepping action is in the wrong lane and the next position in the parallel lane is empty, it will TURN to that lane's position.
